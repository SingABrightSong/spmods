
// -------- spaceflight

// reaction wheel nerf
@PART[*]:HAS[@MODULE[ModuleReactionWheel]]:LAST[KerbalWitchery] {
	@MODULE[ModuleReactionWheel] {
		@PitchTorque /= 100
		@RollTorque /= 100
		@YawTorque /= 100
	}
}
@PART[probeCoreOcto_v2|probeCoreHex_v2|probeStackSmall|probeStackLarge] {
	@MODULE[ModuleReactionWheel] {
		@PitchTorque *= 10
		@RollTorque *= 10
		@YawTorque *= 10
		@RESOURCE[ElectricCharge] {@rate *= 10}
	}
}
// internal monoprop tanks
@PART[probeCoreCube|probeCoreOcto_v2|probeCoreHex_v2] {
	&RESOURCE[MonoPropellant] {
		amount = 2.5
		maxAmount = 2.5
	}
}
@PART[HECS2_ProbeCore] {
	&RESOURCE[MonoPropellant] {
		amount = 5
		maxAmount = 5
	}
}
// srb gimbal
@PART[Mite|Shrimp|solidBooster1-1|MassiveBooster|solidBooster_v2|solidBooster_sm_v2] {
	&MODULE[ModuleGimbal] {
		gimbalTransformName = thrustTransform
		gimbalRange = 1
	}
}
@PART[Pollux]:NEEDS[SquadExpansion/MakingHistory] {
	&MODULE[ModuleGimbal] {
		gimbalTransformName = thrustTransform
		gimbalRange = 1
	}
}
// RCS
@PART[*]:HAS[@MODULE[ModuleRCS*],!MODULE[ModuleCommand]]:LAST[KerbalWitchery] {
	@cost = #$MODULE[ModuleRCS*]/thrusterPower$
	@cost *= #$MODULE[ModuleRCS*]/atmosphereCurve/key,0[1, ]$
	@cost /= 2
	@entryCost = #$cost$
	@entryCost *= 5
	@entryCost ^= :\.\d.*::
}
// Turbine
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[Turbine]]]:LAST[KerbalWitchery] {
	@cost *= 5
	@entryCost = #$cost$
	@entryCost *= 8
	@entryCost ^= :\.\d.*::
}
// SolidBooster
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[SolidBooster]],!RESOURCE[LiquidFuel]]:LAST[KerbalWitchery] {
	@cost = #$MODULE[ModuleEngines*]:HAS[#EngineType[SolidBooster]]/maxThrust$
	@cost *= #$MODULE[ModuleEngines*]:HAS[#EngineType[SolidBooster]]/atmosphereCurve/key,0[1, ]$
	@cost /= 10
	@entryCost = #$cost$
	@entryCost *= 5
	@entryCost ^= :\.\d.*::
	
	// thrust curve
	@MODULE[ModuleEngines*]:HAS[#EngineType[SolidBooster]] {
		&useThrustCurve = true
		&thrustCurve {
			key = 0 0.1 0 20
			key = 0.05 0.9 0 0.5
			key = 0.5 1 0 0
			key = 1 0.8 -1 0
		}
	}
}
@PART[LaunchEscapeSystem]:LAST[KerbalWitchery] {
	@cost /= 2
	@entryCost /= 2
	@entryCost ^= :\.\d.*::
}
// MonoProp
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[MonoProp]]]:LAST[KerbalWitchery] {
	@cost = #$MODULE[ModuleEngines*]:HAS[#EngineType[MonoProp]]/maxThrust$
	@cost *= #$MODULE[ModuleEngines*]:HAS[#EngineType[MonoProp]]/atmosphereCurve/key,0[1, ]$
	@cost /= 2
	@entryCost = #$cost$
	@entryCost *= 5
	@entryCost ^= :\.\d.*::
}
// LiquidFuel
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]]]:LAST[KerbalWitchery] { // ,!MODULE[MultiModeEngine]
	@cost = #$MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]]/maxThrust$
	@cost *= #$MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]]/atmosphereCurve/key,0[1, ]$
	@entryCost = #$cost$
	@entryCost *= 8
	@entryCost ^= :\.\d.*::
	
	// - throttle range
	@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]] { @minThrust = #$maxThrust$ }
	%twr = #$MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]]/maxThrust$
	@twr /= #$mass$
	
	MODULE { name = ModuleEngineWitchery }
}
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]],#twr[>249]]:LAST[KerbalWitchery] {@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]] {@minThrust *= 0.67}}
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]],#twr[>120],#twr[<250]]:LAST[KerbalWitchery] {@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]] {@minThrust *= 0.8}}
// radial
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]],~bulkheadProfiles[*size*]]:LAST[KerbalWitchery] {
	@MODULE[ModuleEngines*]:HAS[#EngineType[LiquidFuel]] {
		@minThrust = #$maxThrust$
		@minThrust *= 0.25
	}
}
// Nuclear & Electric
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[Nuclear]]]:LAST[KerbalWitchery] {
	@cost = #$MODULE[ModuleEngines*]:HAS[#EngineType[Nuclear]]/maxThrust$
	@cost *= #$MODULE[ModuleEngines*]:HAS[#EngineType[Nuclear]]/atmosphereCurve/key,0[1, ]$
	@entryCost = #$cost$
	@entryCost *= 10
	@entryCost ^= :\.\d.*::
	@MODULE[ModuleEngines*]:HAS[#EngineType[Nuclear]] { @minThrust = #$maxThrust$ }
	MODULE { name = ModuleEngineWitchery }

}
@PART[*]:HAS[@MODULE[ModuleEngines*]:HAS[#EngineType[Electric]]]:LAST[KerbalWitchery] {
	@cost = #$MODULE[ModuleEngines*]:HAS[#EngineType[Electric]]/maxThrust$
	@cost *= #$MODULE[ModuleEngines*]:HAS[#EngineType[Electric]]/atmosphereCurve/key,0[1, ]$
	@entryCost = #$cost$
	@entryCost *= 10
	@entryCost ^= :\.\d.*::
	// @cost *= 2
	@MODULE[ModuleEngines*]:HAS[#EngineType[Electric]] {
		@minThrust = #$maxThrust$
		@minThrust *= 0.75
	}
	MODULE { name = ModuleEngineWitchery }
}

@PART[*]:HAS[#entryCost[*],~name[Potato*],!MODULE[ModuleEngines*]]:LAST[KerbalWitchery] {
	@entryCost = #$cost$
	@entryCost *= 3
	@entryCost ^= :\.\d.*::
}
// @PART[SSME]:LAST[KerbalWitchery] {@MODULE[ModuleEngines*] {@minThrust *= 0.67}} // RS-25
// @PART[LiquidEngineRE-I2]:NEEDS[SquadExpansion/MakingHistory]:LAST[KerbalWitchery] {@MODULE[ModuleEngines*] {@minThrust *= 0.77}} // J-2
// @PART[Size3AdvancedEngine]:LAST[KerbalWitchery] {@MODULE[ModuleEngines*] {@minThrust *= 0.82}} // J-2X

// -------- science

@EXPERIENCE_TRAIT[Scientist] {
	@EFFECT[VesselScienceReturn] {
		!modifiers = 
		modifiers = 1.1, 1.2, 1.3, 1.4, 1.5
	}
	@EFFECT[PartScienceReturn] {
		!modifiers = 
		modifiers = 1.1, 1.2, 1.3, 1.4, 1.5
	}
}
@EXPERIMENT_DEFINITION:HAS[#id[surfaceSample]] { !requiredExperimentLevel = }
@PART[sensorThermometer|sensorBarometer|sensorAccelerometer|sensorGravimeter|sensorAtmosphere|InfraredTelescope|Magnetometer] {@MODULE[ModuleScienceExperiment] {@xmitDataScalar = 1}}
@PART[sensorAccelerometer|sensorAtmosphere|sensorGravimeter] {@cost *= 0.3}
@PART[science_module] {@MODULE[ModuleScienceExperiment]:HAS[#experimentID[mobileMaterialsLab]] {%resettableOnEVA = False}}
@PART[Large_Crewed_Lab] {
	// @MODULE[ModuleScienceContainer] {
		// canBeTransferredToInVessel = True
		// canTransferInVessel = True
	// }
	!MODULE[ModuleScienceConverter] {}
	MODULE {
		name = ModuleScienceExperiment
		experimentID = crewReport
		experimentActionName = #autoLOC_502009
		resetActionName = #autoLOC_502010
		reviewActionName = #autoLOC_502200
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = True
		rerunnable = True
		xmitDataScalar = 1
		usageReqMaskInternal = 13
		usageReqMaskExternal = -1
	}
	MODULE {
		name = ModuleScienceExperiment
		experimentID = mobileMaterialsLab
		experimentActionName = #autoLOC_502061
		resetActionName = #autoLOC_502062
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = True
		rerunnable = True
		xmitDataScalar = 0.7
		usageReqMaskInternal = 13
		usageReqMaskExternal = -1
	}
	MODULE {
		name = ModuleScienceExperiment
		experimentID = mysteryGoo
		experimentActionName = #autoLOC_502053
		resetActionName = #autoLOC_502054
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = True
		rerunnable = True
		xmitDataScalar = 0.7
		usageReqMaskInternal = 13
		usageReqMaskExternal = -1
	}
	MODULE {
		name = ModuleScienceExperiment
		experimentID = surfaceSample
		experimentActionName = #autoLOC_502018
		resetActionName = #autoLOC_502019
		reviewActionName = #autoLOC_502203
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = False
		xmitDataScalar = 0.5
		dataIsCollectable = True
		collectActionName = #autoLOC_238018
		interactionRange = 5
		rerunnable = True
		usageReqMaskInternal = -1
		usageReqMaskExternal = 13
	}
}

// - dlc science fractions
@EXPERIMENT_DEFINITION:HAS[#id[crewReport]]:NEEDS[SquadExpansion/Serenity] {
	@baseValue *= 3
	@scienceCap *= 3	
}
@PART[SurfaceScanner]:NEEDS[SquadExpansion/Serenity] {
	MODULE {
		name = ModuleScienceExperiment
		experimentID = surfaceSample
		experimentActionName = #autoLOC_502018
		resetActionName = #autoLOC_502019
		reviewActionName = #autoLOC_502203
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = False
		xmitDataScalar = 0.25
		dataIsCollectable = True
		collectActionName = #autoLOC_238018
		interactionRange = 1.5
		rerunnable = True
		scienceValueRatio = 0.33333333
		showScienceValueRatio = true
		usageReqMaskInternal = 1
		usageReqMaskExternal = 8
	}
}
@PART[kerbalEVA*]:NEEDS[SquadExpansion/Serenity] {
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[surfaceSample]] {
		&scienceValueRatio = 0.66666666
		&showScienceValueRatio = true
	}
}
@PART[science_module]:NEEDS[SquadExpansion/Serenity] {
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[mobileMaterialsLab]] {
		&scienceValueRatio = 0.5
		&showScienceValueRatio = true
	}
}
@PART[GooExperiment]:NEEDS[SquadExpansion/Serenity] {
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[mysteryGoo]] {
		&scienceValueRatio = 0.5
		&showScienceValueRatio = true
	}
}
@PART[Large_Crewed_Lab]:NEEDS[SquadExpansion/Serenity] {
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[crewReport]] {
		&scienceValueRatio = 1.0
		&showScienceValueRatio = true
	}
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[mobileMaterialsLab]] {
		&scienceValueRatio = 1.0
		&showScienceValueRatio = true
	}
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[mysteryGoo]] {
		&scienceValueRatio = 1.0
		&showScienceValueRatio = true
	}
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[surfaceSample]] {
		&scienceValueRatio = 1.0
		&showScienceValueRatio = true
	}
}
@PART[*]:HAS[#CrewCapacity[1],@MODULE[ModuleScienceExperiment]:HAS[#experimentID[crewReport]]]:NEEDS[SquadExpansion/Serenity]:LAST[KerbalWitchery] {
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[crewReport]] {
		&scienceValueRatio = 0.33333333
		&showScienceValueRatio = true
	}
}
@PART[*]:HAS[#CrewCapacity[>1],@MODULE[ModuleScienceExperiment]:HAS[#experimentID[crewReport]]]:NEEDS[SquadExpansion/Serenity]:LAST[KerbalWitchery] {
	@MODULE[ModuleScienceExperiment]:HAS[#experimentID[crewReport]] {
		&scienceValueRatio = 0.66666666
		&showScienceValueRatio = true
	}
}

// -- contracts

// surveys
@Contracts {
	@Survey {
		@SURVEY_DEFINITION,0 {
			@PARAM,0 {
				@AllowLow = True
				@AllowHigh = True
				@AllowWater = True
			}
			@PARAM,1 {
				@AllowGround = True
				@AllowWater = True
			}
			@PARAM,2 {@AllowWater = True}
		}
		@SURVEY_DEFINITION,2 {
			@PARAM,0 {@AllowWater = True}
		}
		@SURVEY_DEFINITION,3 {
			@PARAM,0 {@AllowWater = True}
			@PARAM,1 {
				@AllowGround = True
				@AllowWater = True
			}
		}
		SURVEY_DEFINITION {
			DataName = #autoLOC_6002501
			@DataName ^= : .+: :
			AnomalyName = #autoLOC_7001065
			ResultName = #autoLOC_7001070
			FundsReward = 53000
			FundsFailure = 0
			ScienceReward = 0
			ReputationReward = 9
			ReputationFailure = 9 
			PARAM {
				Experiment = magnetometer
				Description = #autoLOC_6002500
				Texture = seismic
				Tech = magnetometer
				AllowGround = False
				AllowLow = False
				AllowHigh = True
				AllowWater = False
				AllowVacuum = True
				FundsMultiplier = 0.9
				ScienceMultiplier = 1
				ReputationMultiplier = 1.1
			}
		}
	}
	@RoverConstruction:NEEDS[FacilityTree] {@TechNodeRequired = generalConstruction}
	@OrbitalConstruction:NEEDS[FacilityTree] {@TechNodeRequired = generalConstruction}
}

// part tests

// remove expensive engines
@PART[*]:HAS[#cost[>15000],@MODULE[ModuleEngines*]]:LAST[KerbalWitchery] {!MODULE[ModuleTestSubject] {}}

// add missing
@PART[roverWheel3] {
	&MODULE[ModuleTestSubject] {
		environments = 15
		useStaging = False
		useEvent = True
	}
}
@PART[omsEngine] {
	&MODULE[ModuleTestSubject] {
		useStaging = True
		useEvent = True
		situationMask = 127
		CONSTRAINT {
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT {
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT {
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT {
			type = ALTITUDE
			test = GT
			value = 0
			situationMask = 8
		}
		CONSTRAINT {
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT {
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
		CONSTRAINT {
			type = SPEED
			test = GT
			value = 0
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEED
			test = LT
			value = 600
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEED
			test = GT
			value = 300
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEED
			test = LT
			value = 1200
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEED
			test = GT
			value = 600
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT {
			type = SPEED
			test = LT
			value = 2500
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT {
			type = SPEEDENV
			test = LT
			value = 200
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEEDENV
			test = GT
			value = 100
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEEDENV
			test = LT
			value = 100
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEEDENV
			test = GT
			value = 50
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEEDENV
			test = LT
			value = 50
			prestige = Exceptional
		}
		CONSTRAINT {
			type = SPEEDENV
			test = GT
			value = 20
			prestige = Exceptional
		}
	}
}
@PART[Mite|Shrimp] {
	&MODULE[ModuleTestSubject] {
		useStaging = True
		useEvent = True
		situationMask = 60
		CONSTRAINT {
			type = SITUATION
			value = 0
			body = _NotHome
			prestige = Trivial
		}
		CONSTRAINT {
			type = SITUATION
			value = 0
			body = _NotHome
			prestige = Significant
		}
		CONSTRAINT {
			type = REPEATABILITY
			value = ALWAYS
			prestige = Trivial
		}
		CONSTRAINT {
			type = REPEATABILITY
			value = BODYANDSITUATION
			prestige = Significant
		}
		CONSTRAINT {
			type = REPEATABILITY
			value = ONCEPERPART
			prestige = Exceptional
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = GT
			value = 4000
			prestige = Trivial
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = LT
			value = 8000
			prestige = Trivial
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = GT
			value = 2000
			prestige = Significant
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = LT
			value = 4000
			prestige = Significant
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = GT
			value = 1000
			prestige = Exceptional
		}
		CONSTRAINT {
			type = ALTITUDEENV
			test = LT
			value = 2000
			prestige = Exceptional
		}
		CONSTRAINT {
			type = ALTITUDE
			test = GT
			value = 0
			situationMask = 8
		}
		CONSTRAINT {
			type = ALTITUDE
			test = LT
			value = 300000
			situationMask = 16
			body = _NotSun
		}
		CONSTRAINT {
			type = ALTITUDE
			test = LT
			value = 600000
			situationMask = 32
			body = _NotSun
		}
		CONSTRAINT {
			type = SPEED
			test = GT
			value = 0
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEED
			test = LT
			value = 600
			situationMask = 8
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEED
			test = GT
			value = 0
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEED
			test = LT
			value = 900
			situationMask = 8
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEED
			test = GT
			value = 300
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT {
			type = SPEED
			test = LT
			value = 1200
			situationMask = 8
			prestige = Exceptional
		}
		CONSTRAINT {
			type = SPEEDENV
			test = LT
			value = 200
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEEDENV
			test = GT
			value = 100
			prestige = Trivial
		}
		CONSTRAINT {
			type = SPEEDENV
			test = LT
			value = 100
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEEDENV
			test = GT
			value = 50
			prestige = Significant
		}
		CONSTRAINT {
			type = SPEEDENV
			test = LT
			value = 50
			prestige = Exceptional
		}
		CONSTRAINT {
			type = SPEEDENV
			test = GT
			value = 20
			prestige = Exceptional
		}
	}
}




